name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Job 1: Lint, TypeCheck, Unit Tests, Build
  test:
    runs-on: ubuntu-latest
    name: Lint, TypeCheck, Unit Tests & Build

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      CAS_SERVER_URL_PREFIX: https://autenticacao.ufba.br/ca
      SERVER_URL: http://localhost:3000/api
      CLIENT_URL: http://localhost:3000
      NODE_ENV: test
      PORT: "3000"
      MINIO_ENDPOINT: localhost
      MINIO_PORT: "9000"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: sistema-de-monitoria-test
      JWT_SECRET: build-test-jwt-secret-32-char-minimum-length-required-here
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      SKIP_ENV_VALIDATION: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.3'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run unit tests
        run: npm run test

      - name: Build application
        run: npm run build

  # Job 2: E2E Tests with Docker
  e2e:
    runs-on: ubuntu-latest
    name: E2E Tests with Docker
    needs: test

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sistema_de_monitoria_ic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sistema_de_monitoria_ic_test
      CAS_SERVER_URL_PREFIX: https://autenticacao.ufba.br/ca
      SERVER_URL: http://localhost:3000/api
      CLIENT_URL: http://localhost:3000
      NODE_ENV: test
      PORT: "3000"
      MINIO_ENDPOINT: localhost
      MINIO_PORT: "9000"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: sistema-de-monitoria-e2e-test
      JWT_SECRET: e2e-test-jwt-secret-32-char-minimum-length-required-here
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      SKIP_ENV_VALIDATION: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.3'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application for E2E
        run: npm run build

      - name: Setup database
        run: |
          npx drizzle-kit push --force
          npm run seed:test-user || npm run seed:test-user:js
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sistema_de_monitoria_ic_test

      - name: Install Playwright browsers
        run: npm run test:e2e:install

      - name: Kill any existing process on port 3000
        run: |
          sudo lsof -ti:3000 | xargs -r sudo kill -9 || true

      - name: Start application
        run: |
          npm run start &
          echo $! > app.pid
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sistema_de_monitoria_ic_test
          CAS_SERVER_URL_PREFIX: https://autenticacao.ufba.br/ca
          SERVER_URL: http://localhost:3000/api
          CLIENT_URL: http://localhost:3000
          NODE_ENV: production
          PORT: "3000"
          MINIO_ENDPOINT: localhost
          MINIO_PORT: "9000"
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          MINIO_BUCKET_NAME: sistema-de-monitoria-e2e-test
          JWT_SECRET: e2e-test-jwt-secret-32-char-minimum-length-required-here
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          SKIP_ENV_VALIDATION: "true"

      - name: Wait for application to be ready
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sistema_de_monitoria_ic_test

      - name: Stop application
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30